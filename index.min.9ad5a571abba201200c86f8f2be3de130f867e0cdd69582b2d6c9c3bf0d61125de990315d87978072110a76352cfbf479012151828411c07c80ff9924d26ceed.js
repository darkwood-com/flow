var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(b){const d=suggestions.querySelectorAll('a'),e=[...d],a=e.indexOf(document.activeElement),f=suggestions.classList.contains('d-none');let c=0;b.keyCode===38&&!f?(b.preventDefault(),c=a>0?a-1:0,d[c].focus()):b.keyCode===40&&!f&&(b.preventDefault(),c=a+1<e.length?a+1:a,d[c].focus())}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"https://flow.darkwood.com/docs/getting-started/introduction/",title:"Introduction",description:"Introduction.",content:'\u003ch1 id="flow"\u003eFlow\u003c/h1\u003e\n\u003ch2 id="why-"\u003eWhy ?\u003c/h2\u003e\n\u003cp\u003eFlow concept aims to solve\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdopt asynchronous as native implementation\u003c/li\u003e\n\u003cli\u003eBuild your code with functional programming and monoids\u003c/li\u003e\n\u003cli\u003eAssemble your code visually\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="installation"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003ePHP 8.3 is the minimal version to use \u003cem\u003eFlow\u003c/em\u003e\nThe recommended way to install it through \u003ca href="http://getcomposer.org/"\u003eComposer\u003c/a\u003e and execute\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ecomposer require darkwood/flow\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2 id="usage"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eA working script is available in the bundled \u003ccode\u003eexamples\u003c/code\u003e directory\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRun Flow : \u003ccode\u003ephp examples/flow.php\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eStart Server : \u003ccode\u003ephp examples/server.php\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eStart Client(s) : \u003ccode\u003ephp examples/client.php\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMessaging part require to install \u003ca href="https://www.docker.com"\u003eDocker\u003c/a\u003e and execute \u003ccode\u003edocker-compose up -d\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id="documentation"\u003eDocumentation\u003c/h2\u003e\n\u003cp\u003e\u003ca href="https://darkwood-com.github.io/flow"\u003ehttps://darkwood-com.github.io/flow\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="license"\u003eLicense\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003eFlow\u003c/em\u003e is released under the MIT License.\u003c/p\u003e\n'}).add({id:1,href:"https://flow.darkwood.com/docs/getting-started/job/",title:"Job",description:"Job.",content:'\u003ch1 id="job"\u003eJob\u003c/h1\u003e\n\u003cp\u003eWhen using Flow, you can pass Closure or JobInterface, it\u0026rsquo;s useful when you want to specialize your Job, that come with dependecy injection.\u003c/p\u003e\n\u003ch2 id="closurejob"\u003eClosureJob\u003c/h2\u003e\n\u003cp\u003eClosureJob simplifies job handling by allowing the use of closures or custom job classes, providing a versatile solution for managing jobs in your application.\u003c/p\u003e\n\u003ch2 id="yjob"\u003eYJob\u003c/h2\u003e\n\u003cp\u003eThe YJob class defines the Y combinator to recursively apply the job function, making it particularly useful in scenarios where you need to perform recursive tasks without explicitly writing recursive functions.\u003c/p\u003e\n\u003ch2 id="make-your-own-job"\u003eMake your own Job\u003c/h2\u003e\n\u003cp\u003eYou can make your custom Job by implementing \u003ccode\u003eFlow\\JobInterface\u003c/code\u003e.\u003c/p\u003e\n'}).add({id:2,href:"https://flow.darkwood.com/docs/getting-started/flow/",title:"Flow",description:"Flow.",content:'\u003ch1 id="flow"\u003eFlow\u003c/h1\u003e\n\u003ch2 id="flow-implementation"\u003eFlow implementation\u003c/h2\u003e\n\u003cp\u003eAccording to \u003ca href="https://en.wikipedia.org/wiki/Monad_(functional_programming)"\u003eWikipedia\u003c/a\u003e, Monads is an abstract generic structure that get its usage in function composition. Monads can shortly considered as \u003ccode\u003eProgramming with effects\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eWe consider \u003ccode\u003eFlows\u003c/code\u003e as a set of elements in our ensemble as a Monad implementation :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBy using \u003ccode\u003ejob\u003c/code\u003e as basic function type within the \u003ccode\u003eFlow\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eBy using \u003ccode\u003efn\u003c/code\u003e as a binary operation, \u003ccode\u003eFlow\u003c/code\u003e can be composed together with others \u003ccode\u003eFlow\u003c/code\u003e element.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA \u003ccode\u003eFlow\u003c/code\u003e can process one or many \u003ccode\u003eIps\u003c/code\u003e which has its application for asynchronous programming when mixing with \u003ca href="drivers.md"\u003e\u003ccode\u003eDrivers\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="flow-1"\u003eFlow\u003c/h2\u003e\n\u003cp\u003eThis is the standard Flow implementation that support asynchronous \u003ccode\u003eIp\u003c/code\u003e processing.\u003c/p\u003e\n\u003ch2 id="flowdecorator"\u003eFlowDecorator\u003c/h2\u003e\n\u003cp\u003eThis is useful for implementing the \u003ca href="https://en.wikipedia.org/wiki/Decorator_pattern"\u003edecorator design pattern\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id="transportflow"\u003eTransportFlow\u003c/h2\u003e\n\u003cp\u003eTransportFlow will interact with Flow with Producer and Sender.\u003c/p\u003e\n\u003ch2 id="yflow"\u003eYFlow\u003c/h2\u003e\n\u003cp\u003eYFlow use YCombinator to provide recursion.\u003c/p\u003e\n\u003ch2 id="make-your-own-flow"\u003eMake your own Flow\u003c/h2\u003e\n\u003cp\u003eYou can make your custom Flow by implementing \u003ccode\u003eFlow\\FlowInterface\u003c/code\u003e.\u003c/p\u003e\n'}).add({id:3,href:"https://flow.darkwood.com/docs/getting-started/driver/",title:"Driver",description:"Driver.",content:'\u003ch1 id="driver"\u003eDriver\u003c/h1\u003e\n\u003cp\u003eFlow embark multiple drivers.\u003c/p\u003e\n\u003ch2 id="coroutine"\u003eCoroutine\u003c/h2\u003e\n\u003cp\u003eDrivers are useful to essentially provide asynchronous programming by using \u003ca href="https://en.wikipedia.org/wiki/Coroutine"\u003ecoroutines\u003c/a\u003e.\nThus, this can be implemented in severals ways in most popular programming languages.\u003c/p\u003e\n\u003cp\u003eCoroutine are very similar to \u003ca href="https://en.wikipedia.org/wiki/Thread_(computing)"\u003ethreads\u003c/a\u003e and provide concurrency but not parallelism.\nAdvantage of using coroutine :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ethis can be a preferred usage to thread for \u003ca href="https://en.wikipedia.org/wiki/Real-time_computing#Hard"\u003ehard-realtime\u003c/a\u003e context.\u003c/li\u003e\n\u003cli\u003ethere is no need for synchronisation primitives such as mutexes, semaphore.\u003c/li\u003e\n\u003cli\u003eit reduces the usage of system lock for sharing resources.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="amp-driver"\u003eAmp Driver\u003c/h2\u003e\n\u003cp\u003eTo use Amp Driver, you have to require the library with composer\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ecomposer require amphp/amp\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMore documentation can be found \u003ca href="https://amphp.org"\u003ehttps://amphp.org\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="fiber-driver"\u003eFiber Driver\u003c/h2\u003e\n\u003cp\u003eMore documentation can be found \u003ca href="https://www.php.net/manual/fr/language.fibers.php"\u003ehttps://www.php.net/manual/fr/language.fibers.php\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="reactphp-driver"\u003eReactPHP Driver\u003c/h2\u003e\n\u003cp\u003eTo use ReactPHP Driver, you have to require the library with composer\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ecomposer require react/async\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMore documentation can be found \u003ca href="https://reactphp.org"\u003ehttps://reactphp.org\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="spatie-driver"\u003eSpatie Driver\u003c/h2\u003e\n\u003cp\u003eTo use Spatie Driver, you have to require the library with composer\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003ecomposer require spatie/async\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMore documentation can be found \u003ca href="https://github.com/spatie/async"\u003ehttps://github.com/spatie/async\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="swoole-driver"\u003eSwoole Driver\u003c/h2\u003e\n\u003cp\u003eTo use Swoole Driver, you have to add the extension with your current running PHP\u003c/p\u003e\n\u003cpre\u003e\u003ccode class="language-bash"\u003epecl install openswoole-22.0.0\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eMore documentation can be found \u003ca href="https://openswoole.com"\u003ehttps://openswoole.com\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="make-your-custom-driver"\u003eMake your custom driver\u003c/h2\u003e\n\u003cp\u003eYou can make your custom driver by implementing \u003ccode\u003eFlow\\DriverInterface\u003c/code\u003e\u003c/p\u003e\n'}).add({id:4,href:"https://flow.darkwood.com/docs/getting-started/async-handler/",title:"Async Handler",description:"Async Handler.",content:'\u003ch1 id="async-handler"\u003eAsync Handler\u003c/h1\u003e\n\u003cp\u003eWhen processing Flow at async step, you can choose a handler that will process asynchronously the Ip.\u003c/p\u003e\n\u003ch2 id="asynchandler"\u003eAsyncHandler\u003c/h2\u003e\n\u003cp\u003eThis is the default one. Ip is async processed immediately.\u003c/p\u003e\n\u003ch2 id="batchasynchandler"\u003eBatchAsyncHandler\u003c/h2\u003e\n\u003cp\u003eThis async process Ip as batch capability : the handler will wait for a certain amount of async messages ($batchSize) to be processed before pushing them.\u003c/p\u003e\n\u003ch2 id="deferasynchandler"\u003eDeferAsyncHandler\u003c/h2\u003e\n\u003cp\u003eThis async process Ip to offer defer capability : the handler will pass [$data, $defer] as entry for the job. In that case, the job can fine control the async process. $defer is a callable that embark two callbacks\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ean complete callback to store result\u003c/li\u003e\n\u003cli\u003ean async callback to go to the next async call.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="make-your-async-handler"\u003eMake your Async Handler\u003c/h2\u003e\n\u003cp\u003eYou can make your custom Ip strategy by implementing \u003ccode\u003eFlow\\AsyncHandlerInterface\u003c/code\u003e\u003c/p\u003e\n'}).add({id:5,href:"https://flow.darkwood.com/docs/getting-started/ip-strategy/",title:"Ip Strategy",description:"Ip Strategy.",content:'\u003ch1 id="ip-strategy"\u003eIp Strategy\u003c/h1\u003e\n\u003cp\u003eWhen processing Flow with one or multiple Ips, you can choose a strategy that will sequence the order of processing Ip.\u003c/p\u003e\n\u003ch2 id="linearipstrategy"\u003eLinearIpStrategy\u003c/h2\u003e\n\u003cp\u003eThis process Ip by order : first in, first out.\u003c/p\u003e\n\u003ch2 id="stackipstrategy"\u003eStackIpStrategy\u003c/h2\u003e\n\u003cp\u003eThis process Ip as a stack order : push ip to the top of the stack, then order ip retrieval from the top stack to bottom.\u003c/p\u003e\n\u003ch2 id="maxipstrategy"\u003eMaxIpStrategy\u003c/h2\u003e\n\u003cp\u003eThis process Ip as soon less Ip are currently process than the current max.\u003cbr\u003e\nYou can embed it by a custom strategy with is \u003ccode\u003eLinearIpStrategy\u003c/code\u003e by default.\u003c/p\u003e\n\u003ch2 id="make-your-ip-strategy"\u003eMake your Ip Strategy\u003c/h2\u003e\n\u003cp\u003eYou can make your custom Ip strategy by implementing \u003ccode\u003eFlow\\IpStrategyInterface\u003c/code\u003e\u003c/p\u003e\n'}).add({id:6,href:"https://flow.darkwood.com/docs/getting-started/ressources/",title:"Ressources",description:"Ressources.",content:'\u003ch1 id="more-information-about-the-code"\u003eMore information about the code\u003c/h1\u003e\n\u003cp\u003eArticle of this project : \u003ca href="https://blog.darkwood.com/article/php-railway-flow-based-programming"\u003ehttps://blog.darkwood.com/article/php-railway-flow-based-programming\u003c/a\u003e\nSlides of this project : \u003ca href="https://speakerdeck.com/matyo91/php-railway-flow-based-programming"\u003ehttps://speakerdeck.com/matyo91/php-railway-flow-based-programming\u003c/a\u003e\nVideo of this project : \u003ca href="https://www.youtube.com/watch?v=mxxdhGsaIjY"\u003ehttps://www.youtube.com/watch?v=mxxdhGsaIjY\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id="railway-flow-based-programming-with-elixir-from-anton-mishchukhttpstwittercomanton_mishchuk"\u003eRailway Flow Based Programming with Elixir from \u003ca href="https://twitter.com/anton_mishchuk"\u003eAnton Mishchuk\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePresentation in an article : \u003ca href="https://anton-mishchuk.medium.com/railway-flow-based-programming-with-flowex-ef04fd338e41"\u003ehttps://anton-mishchuk.medium.com/railway-flow-based-programming-with-flowex-ef04fd338e41\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePresentation with video : \u003ca href="https://www.youtube.com/watch?v=TLvbP8bt2HA"\u003ehttps://www.youtube.com/watch?v=TLvbP8bt2HA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAdvanced implementation with multiple programming languages : \u003ca href="https://medium.com/@anton.mishchuk/multi-language-flowex-components-fdda11d34744"\u003ehttps://medium.com/@anton.mishchuk/multi-language-flowex-components-fdda11d34744\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePresentation in an article : \u003ca href="https://fr.slideshare.net/AntonMishchuk/multilanguage-fbp-with-flowex"\u003ehttps://fr.slideshare.net/AntonMishchuk/multilanguage-fbp-with-flowex\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementation in Elixir : \u003ca href="https://github.com/antonmi/flowex"\u003ehttps://github.com/antonmi/flowex\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementation in Elixir with multiple programming languages : \u003ca href="https://github.com/antonmi/multi_flowex"\u003ehttps://github.com/antonmi/multi_flowex\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="flow-based-programming-from-j-paul-rodker-morrisonhttpsjpaulmgithubio"\u003eFlow Based Programming from \u003ca href="https://jpaulm.github.io"\u003eJ. Paul Rodker Morrison\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003econcept : \u003ca href="https://jpaulm.github.io/fbp"\u003ehttps://jpaulm.github.io/fbp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementation in javascript from \u003ca href="https://github.com/bergie"\u003eHenri Bergius\u003c/a\u003e : \u003ca href="https://noflojs.org"\u003ehttps://noflojs.org\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementation in PHP from \u003ca href="https://github.com/bergie"\u003eHenri Bergius\u003c/a\u003e : \u003ca href="https://github.com/phpflo/phpflo"\u003ehttps://github.com/phpflo/phpflo\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="railway-oriented-programming"\u003eRailway Oriented Programming\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePresentation from \u003ca href="https://twitter.com/rrramiro"\u003eSarmiento Calle\u003c/a\u003e : \u003ca href="https://www.youtube.com/watch?v=RNTo7Y2wMyI"\u003ehttps://www.youtube.com/watch?v=RNTo7Y2wMyI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePresentation from \u003ca href="https://fr.slideshare.net/scottwlaschin"\u003eScott Wlaschin\u003c/a\u003e : \u003ca href="https://fr.slideshare.net/ScottWlaschin/railway-oriented-programming"\u003ehttps://fr.slideshare.net/ScottWlaschin/railway-oriented-programming\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eRailway Oriented Programming: C# Edition - Tama Waddell : \u003ca href="https://www.youtube.com/watch?v=45yk2nuRjj8"\u003ehttps://www.youtube.com/watch?v=45yk2nuRjj8\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementation in PHP from \u003ca href="https://github.com/turanct"\u003eTuranct\u003c/a\u003e : \u003ca href="https://github.com/turanct/railway"\u003ehttps://github.com/turanct/railway\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImplementation in PHP from \u003ca href="https://github.com/monsieurluge"\u003eMonsieur Luge\u003c/a\u003e : \u003ca href="https://github.com/monsieurluge/result"\u003ehttps://github.com/monsieurluge/result\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="coroutines-in-php"\u003eCoroutines in PHP\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="https://github.com/nikic"\u003eNikita Popov\u003c/a\u003e talk about Coroutines in PHP : \u003ca href="https://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html"\u003ehttps://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e100% Asynchrone - 0% Callback en PHP - \u003ca href="https://jolicode.com/equipe/joel-wurtz"\u003eJoel Wurtz\u003c/a\u003e - PHP Tour Montpellier 2018 : \u003ca href="https://www.youtube.com/watch?v=g1UgU5KMyMA"\u003ehttps://www.youtube.com/watch?v=g1UgU5KMyMA\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGénérateurs et Programmation Asynchrone: Mode d’emploi - \u003ca href="https://twitter.com/b_viguier"\u003eBenoit Viguier\u003c/a\u003e - Forum PHP 2018 : \u003ca href="https://www.youtube.com/watch?v=7TvIIt4c8uY"\u003ehttps://www.youtube.com/watch?v=7TvIIt4c8uY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEn route vers le multi-tâche ! - Julien Bianchi - PHP Tour 2016 \u003ca href="https://www.youtube.com/watch?v=FOeGfSbKkuY"\u003ehttps://www.youtube.com/watch?v=FOeGfSbKkuY\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDifferences between Multiprocessing, Multithreading and Coroutines execution in PHP : \u003ca href="https://divinglaravel.com/asynchronous-php"\u003ehttps://divinglaravel.com/asynchronous-php\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDifferences between PHP Fibers RFC in PHP 8.1 vs Swoole Fibers and Coroutines : \u003ca href="https://openswoole.com/article/php-fibers-rfc-vs-swoole-co"\u003ehttps://openswoole.com/article/php-fibers-rfc-vs-swoole-co\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWikipedia Coroutine : \u003ca href="https://en.wikipedia.org/wiki/Coroutine#PHP"\u003ehttps://en.wikipedia.org/wiki/Coroutine#PHP\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCoroutines in C : \u003ca href="https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html"\u003ehttps://www.chiark.greenend.org.uk/~sgtatham/coroutines.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="fibers-in-php"\u003eFibers in PHP\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ePHP Fibers, l’asynchrone au bout de la trompe : \u003ca href="https://blog.ineat-group.com/2023/01/php-fibers-lasynchrone-au-bout-de-la-trompe"\u003ehttps://blog.ineat-group.com/2023/01/php-fibers-lasynchrone-au-bout-de-la-trompe\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePHP RFC on Fibers : \u003ca href="https://wiki.php.net/rfc/fibers"\u003ehttps://wiki.php.net/rfc/fibers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhat Color is Your Function? Understand related issues with asynchronous code execution \u003ca href="https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function"\u003ehttps://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWikipedia on Gree Threads \u003ca href="https://en.wikipedia.org/wiki/Green_thread"\u003ehttps://en.wikipedia.org/wiki/Green_thread\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePHP Fibers - Milko Kosturkov - PHP UK 2022 : \u003ca href="https://www.youtube.com/watch?v=jx0c_3J1BV4"\u003ehttps://www.youtube.com/watch?v=jx0c_3J1BV4\u003c/a\u003e and Fibers vs Generators vs Threads.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="monads-and-php"\u003eMonads and PHP\u003c/h2\u003e\n\u003cp\u003eArticle on Monads : \u003ca href="https://blog.darkwood.com/article/les-monades-et-leur-utilisation-en-php"\u003ehttps://blog.darkwood.com/article/les-monades-et-leur-utilisation-en-php\u003c/a\u003e\nSlides on Monads : \u003ca href="https://speakerdeck.com/matyo91/monads-and-usage-in-php"\u003ehttps://speakerdeck.com/matyo91/monads-and-usage-in-php\u003c/a\u003e\nVideo on Monads : \u003ca href="https://www.youtube.com/watch?v=0M6MhUpra9o"\u003ehttps://www.youtube.com/watch?v=0M6MhUpra9o\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhat is a monad from \u003ca href="https://twitter.com/seanski44"\u003eSean Riley\u003c/a\u003e : \u003ca href="https://www.youtube.com/watch?v=t1e8gqXLbsU"\u003ehttps://www.youtube.com/watch?v=t1e8gqXLbsU\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eWhy monads are useful : \u003ca href="https://jameswestby.net/tech/why-monads-are-useful.html"\u003ehttps://jameswestby.net/tech/why-monads-are-useful.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePromise is neither a Functor nor an Applicative nor a Monad \u003ca href="https://stackoverflow.com/questions/45712106/why-are-promises-monads"\u003ehttps://stackoverflow.com/questions/45712106/why-are-promises-monads\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMonads and Monoids : \u003ca href="https://bartoszmilewski.com/2017/09/06/monads-monoids-and-categories"\u003ehttps://bartoszmilewski.com/2017/09/06/monads-monoids-and-categories\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eGo mad for monads : \u003ca href="https://www.youtube.com/watch?v=F5fUgXFSH0Q"\u003ehttps://www.youtube.com/watch?v=F5fUgXFSH0Q\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFunctional PHP : \u003ca href="https://www.youtube.com/watch?v=M3_xnTK6-pA"\u003ehttps://www.youtube.com/watch?v=M3_xnTK6-pA\u003c/a\u003e, \u003ca href="https://twitter.com/Crell"\u003eCrell\u003c/a\u003e Functional utilities : \u003ca href="https://github.com/Crell/fp"\u003ehttps://github.com/Crell/fp\u003c/a\u003e and the very updated version of the talk, now as a book: \u003ca href="https://leanpub.com/thinking-functionally-in-php/"\u003ehttps://leanpub.com/thinking-functionally-in-php/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDouglas Crockford: Monads and Gonads : \u003ca href="https://www.youtube.com/watch?v=dkZFtimgAcM"\u003ehttps://www.youtube.com/watch?v=dkZFtimgAcM\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMonoids view as Matematical theory for Monads : \u003ca href="https://en.wikipedia.org/wiki/Monoid"\u003ehttps://en.wikipedia.org/wiki/Monoid\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLamphpda, PHP Lambda translation from Haskel : \u003ca href="https://github.com/marcosh/lamphpda"\u003ehttps://github.com/marcosh/lamphpda\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eErrors and monads in PHP by \u003ca href="https://twitter.com/Baptouuuu"\u003eBaptiste LANGLADE\u003c/a\u003e: video \u003ca href="https://www.youtube.com/watch?v=YfoLM0vWALM"\u003ehttps://www.youtube.com/watch?v=YfoLM0vWALM\u003c/a\u003e, Github : \u003ca href="https://github.com/Innmind/Immutable"\u003ehttps://github.com/Innmind/Immutable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eFunctional : \u003ca href="https://github.com/whsv26/functional"\u003ehttps://github.com/whsv26/functional\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMonad PHP : \u003ca href="https://github.com/ircmaxell/monad-php"\u003ehttps://github.com/ircmaxell/monad-php\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ePHP-Option : \u003ca href="https://github.com/schmittjoh/php-option"\u003ehttps://github.com/schmittjoh/php-option\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eResult-Type : \u003ca href="https://github.com/GrahamCampbell/Result-Type"\u003ehttps://github.com/GrahamCampbell/Result-Type\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMonad PHP \u003ca href="https://github.com/ircmaxell/monad-php"\u003ehttps://github.com/ircmaxell/monad-php\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="y-combinator-and-php"\u003eY-Combinator and PHP\u003c/h2\u003e\n\u003cp\u003eArticle of Y-Combinator : \u003ca href="https://blog.darkwood.com/article/y-combinator-en-php"\u003ehttps://blog.darkwood.com/article/y-combinator-en-php\u003c/a\u003e\nSlides of Y-Combinator : \u003ca href="https://speakerdeck.com/matyo91/y-combinator-in-php"\u003ehttps://speakerdeck.com/matyo91/y-combinator-in-php\u003c/a\u003e\nVideo of Y-Combinator : \u003ca href="https://www.youtube.com/watch?v=QSS_ZcO8Q1g"\u003ehttps://www.youtube.com/watch?v=QSS_ZcO8Q1g\u003c/a\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href="http://en.wikipedia.org/wiki/Lambda_calculus"\u003eLambda Calculus - Wikipedia\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLambda calculus language explanation : \u003ca href="https://tgdwyer.github.io/lambdacalculus"\u003ehttps://tgdwyer.github.io/lambdacalculus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eCombinator : \u003ca href="https://github.com/loophp/combinator"\u003ehttps://github.com/loophp/combinator\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLambda-php : \u003ca href="https://github.com/igorw/lambda-php"\u003ehttps://github.com/igorw/lambda-php\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDeriving the y combinator in 7 easy steps : \u003ca href="https://gist.github.com/igstan/388351"\u003ehttps://gist.github.com/igstan/388351\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eY combinator real life application: recursive memoization in clojure : \u003ca href="https://blog.klipse.tech/lambda/2016/08/10/y-combinator-app.html"\u003ehttps://blog.klipse.tech/lambda/2016/08/10/y-combinator-app.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id="messaging-approach-with-east-oriented-code-from-frédéric-hardyhttpstwittercommageekguy"\u003eMessaging approach with East oriented code from \u003ca href="https://twitter.com/mageekguy"\u003eFrédéric Hardy\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eArticle : \u003ca href="http://blog.est.voyage/phpTour2015"\u003ehttp://blog.est.voyage/phpTour2015\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSource code : \u003ca href="https://github.com/estvoyage/phpTour2015"\u003ehttps://github.com/estvoyage/phpTour2015\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n'}).add({id:7,href:"https://flow.darkwood.com/docs/getting-started/changelog/",title:"Changelog",description:"Changelog.",content:'\u003ch1 id="changelog"\u003eChangelog\u003c/h1\u003e\n\u003cp\u003eChangelog can be found \u003ca href="https://github.com/darkwood-com/flow/blob/1.x/CHANGELOG.md"\u003ehttps://github.com/darkwood-com/flow/blob/1.x/CHANGELOG.md\u003c/a\u003e\u003c/p\u003e\n'}).add({id:8,href:"https://flow.darkwood.com/docs/getting-started/license/",title:"License",description:"License.",content:"\u003cp\u003eThe MIT License (MIT)\u003c/p\u003e\n\u003cp\u003eCopyright (c) 2023 Darkwood\u003c/p\u003e\n\u003cp\u003ePermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \u0026ldquo;Software\u0026rdquo;), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\u003c/p\u003e\n\u003cp\u003eThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\u003c/p\u003e\n\u003cp\u003eTHE SOFTWARE IS PROVIDED \u0026ldquo;AS IS\u0026rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\u003c/p\u003e\n"}).add({id:9,href:"https://flow.darkwood.com/docs/getting-started/",title:"Getting Started",description:"Getting Started Flow.",content:""}).add({id:10,href:"https://flow.darkwood.com/docs/",title:"Docs",description:"Docs Flow.",content:""}),search.addEventListener('input',b,!0),suggestions.addEventListener('click',c,!0);function b(){var d,e;const c=5;d=this.value,e=a.search(d,{limit:c,enrich:!0}),suggestions.classList.remove('d-none'),suggestions.innerHTML="";const b={};e.forEach(a=>{a.result.forEach(a=>{b[a.doc.href]=a.doc})});for(const d in b){const e=b[d],a=document.createElement('div');if(a.innerHTML='<a href><span></span><span></span></a>',a.querySelector('a').href=d,a.querySelector('span:first-child').textContent=e.title,a.querySelector('span:nth-child(2)').textContent=e.description,suggestions.appendChild(a),suggestions.childElementCount==c)break}}function c(){while(suggestions.lastChild)suggestions.removeChild(suggestions.lastChild);return!1}})()