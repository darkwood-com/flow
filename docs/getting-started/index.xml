<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="https://darkwood-fr.github.io/railway-fbp/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/introduction/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/introduction/</guid><description>Railway FBP Why ? Railway Flow Based Programming concept aims to solve
Adopt asynchronous as native implementation Build your code with functional programming and monoids Assemble your code visually Installation PHP 8.0 is the minimal version to use Railway Flow Based Programming is 8.0
The recommended way to install it through Composer and execute
composer require darkwood/railway-fbp Usage A working script is available in the bundled examples directory</description></item><item><title>Rail</title><link>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/rail/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/rail/</guid><description>Rail Rail implementation According to Wikipedia, Monads is an abstract generic structure that get its usage in function composition. Monads can shortly considered as Programming with effects.
We consider Rails as a set of elements in our ensemble as a Monad implementation :
By using job as basic function type within the Rail. By using pipe as a binary operation, Rail can be composed together with others Rail element. A Rail can process one or many Ips which has its application for asynchronous programming when mixing with Drivers.</description></item><item><title>Driver</title><link>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/driver/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/driver/</guid><description>Driver Railway FBP embark multiple drivers.
Coroutine Drivers are useful to essentially provide asynchronous programming by using coroutines.
Thus, this can be implemented in severals ways in most popular programming languages.
Coroutine are very similar to threads and provide concurrency but not parallelism.
Advantage of using coroutine :
this can be a preferred usage to thread for hard-realtime context. there is no need for synchronisation primitives such as mutexes, semaphore.</description></item><item><title>Ip Strategy</title><link>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/ip-strategy/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/ip-strategy/</guid><description>Ip Strategy When processing Rail with one or multiple Ips, you can choose a strategy that will sequence the order of processing Ip.
LinearIpStrategy This process Ip by order : first in, first out.
StackIpStrategy This process Ip as a stack order : push ip to the top of the stack, then order ip retrieval from the top stack to bottom.
MaxIpStrategy This process Ip as soon less Ip are currently process than the current max.</description></item><item><title>Ressources</title><link>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/ressources/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/ressources/</guid><description>More information about the code Article of this project : https://blog.darkwood.fr/article/php-railway-flow-based-programming
Slides of this project : https://speakerdeck.com/matyo91/php-railway-flow-based-programming
Video of this project : https://www.youtube.com/watch?v=u7LTuBRlITA
Railway Flow Based Programming with Elixir from Anton Mishchuk Presentation in an article : https://anton-mishchuk.medium.com/railway-flow-based-programming-with-flowex-ef04fd338e41 Presentation with video : https://www.youtube.com/watch?v=TLvbP8bt2HA Advanced implementation with multiple programming languages : https://medium.com/@anton.mishchuk/multi-language-flowex-components-fdda11d34744 Presentation in an article : https://fr.slideshare.net/AntonMishchuk/multilanguage-fbp-with-flowex Implementation in Elixir : https://github.com/antonmi/flowex Implementation in Elixir with multiple programming languages : https://github.</description></item><item><title>Changelog</title><link>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/changelog/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/changelog/</guid><description>1.0.8 Add code of conduct 1.0.7 Define Monads 1.0.6 Add TransportRail Rail can process multiple jobs in parallel 1.0.5 Add Symfony integration Define monads 1.0.4 Refactor structure Decouple integration 1.0.3 Add RFBP\IpStrategy add several Ip strategy for data processing 1.0.2 Add RFBP\Driver\DriverInterface Add RFBP\Driver\AmpDriver Add RFBP\Driver\ReactDriver Add RFBP\Driver\SwooleDriver 1.0.1 Add RFBP\Producer\CollectionConsumer Add RFBP\Producer\CollectionProducer Add RFBP\Transport\CollectionTransport 1.</description></item><item><title>License</title><link>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/license/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/railway-fbp/docs/getting-started/license/</guid><description>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, 19 November 2007 Copyright (C) 2021 Mathieu Ledru Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.
Preamble The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</description></item></channel></rss>