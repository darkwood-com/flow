<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://darkwood-fr.github.io/flow/docs/getting-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="https://darkwood-fr.github.io/flow/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://darkwood-fr.github.io/flow/docs/getting-started/introduction/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/flow/docs/getting-started/introduction/</guid><description>Flow Why ? Flow concept aims to solve
Adopt asynchronous as native implementation Build your code with functional programming and monoids Assemble your code visually Installation PHP 8.2 is the minimal version to use Flow
The recommended way to install it through Composer and execute
composer require darkwood/flow Usage A working script is available in the bundled examples directory
Run Flow : php examples/flow.php Start Server : php examples/server.</description></item><item><title>Flow</title><link>https://darkwood-fr.github.io/flow/docs/getting-started/flow/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/flow/docs/getting-started/flow/</guid><description>Flow Flow implementation According to Wikipedia, Monads is an abstract generic structure that get its usage in function composition. Monads can shortly considered as Programming with effects.
We consider Flows as a set of elements in our ensemble as a Monad implementation :
By using job as basic function type within the Flow. By using fn as a binary operation, Flow can be composed together with others Flow element. A Flow can process one or many Ips which has its application for asynchronous programming when mixing with Drivers.</description></item><item><title>Driver</title><link>https://darkwood-fr.github.io/flow/docs/getting-started/driver/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/flow/docs/getting-started/driver/</guid><description>Driver Flow embark multiple drivers.
Coroutine Drivers are useful to essentially provide asynchronous programming by using coroutines.
Thus, this can be implemented in severals ways in most popular programming languages.
Coroutine are very similar to threads and provide concurrency but not parallelism.
Advantage of using coroutine :
this can be a preferred usage to thread for hard-realtime context. there is no need for synchronisation primitives such as mutexes, semaphore. it reduces the usage of system lock for sharing resources.</description></item><item><title>Ip Strategy</title><link>https://darkwood-fr.github.io/flow/docs/getting-started/ip-strategy/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/flow/docs/getting-started/ip-strategy/</guid><description>Ip Strategy When processing Flow with one or multiple Ips, you can choose a strategy that will sequence the order of processing Ip.
LinearIpStrategy This process Ip by order : first in, first out.
StackIpStrategy This process Ip as a stack order : push ip to the top of the stack, then order ip retrieval from the top stack to bottom.
MaxIpStrategy This process Ip as soon less Ip are currently process than the current max.</description></item><item><title>Ressources</title><link>https://darkwood-fr.github.io/flow/docs/getting-started/ressources/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/flow/docs/getting-started/ressources/</guid><description>More information about the code Article of this project : https://blog.darkwood.fr/article/php-railway-flow-based-programming
Slides of this project : https://speakerdeck.com/matyo91/php-railway-flow-based-programming
Video of this project : https://www.youtube.com/watch?v=mxxdhGsaIjY
Railway Flow Based Programming with Elixir from Anton Mishchuk Presentation in an article : https://anton-mishchuk.medium.com/railway-flow-based-programming-with-flowex-ef04fd338e41 Presentation with video : https://www.youtube.com/watch?v=TLvbP8bt2HA Advanced implementation with multiple programming languages : https://medium.com/@anton.mishchuk/multi-language-flowex-components-fdda11d34744 Presentation in an article : https://fr.slideshare.net/AntonMishchuk/multilanguage-fbp-with-flowex Implementation in Elixir : https://github.com/antonmi/flowex Implementation in Elixir with multiple programming languages : https://github.</description></item><item><title>Changelog</title><link>https://darkwood-fr.github.io/flow/docs/getting-started/changelog/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/flow/docs/getting-started/changelog/</guid><description>Changelog can be found https://github.com/darkwood-fr/flow/blob/1.x/CHANGELOG.md</description></item><item><title>License</title><link>https://darkwood-fr.github.io/flow/docs/getting-started/license/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://darkwood-fr.github.io/flow/docs/getting-started/license/</guid><description>The MIT License (MIT)
Copyright (c) 2022 Mathieu Ledru mathieu@darkwood.fr
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</description></item></channel></rss>